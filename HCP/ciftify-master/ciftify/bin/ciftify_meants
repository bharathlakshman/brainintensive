#!/usr/bin/env python
"""
Produces a csv file mean time series within the seed with
every voxel/vertex in the supplied mask.
Works with nifty, cifti and gifti formats.

Usage:
    ciftify_meants [options] <func> <seed>

Arguments:
    <func>          functional data
    <seed>          seed mask

Options:
    --mask FILE          brainmask (file format should match seed)
    --outputcsv PATH     Specify the output filename
    --roi-label INT      Specify the numeric label of the ROI you want a seedmap for
    --weighted           Compute weighted average timeseries from the seed map
    --outputlabels PATH  Specity a file to print the ROI row ids to.
    --surfaceonly        func or seed only contains surface data
    --hemi HEMI          If the seed is a gifti file, specify the hemisphere (R or L) here
    --debug              Debug logging
    -n,--dry-run         Dry run
    -h, --help           Prints this message

DETAILS:
Produces a csv file mean time series within the seed with
every voxel/vertex in the supplied mask.
Works with nifty, cifti and gifti formats.

If the rois and a dlabel.nii file,they will be converted to a temporary
dscalar file.

If the --surfaceonly option is selected, the wb_command -cifti-separate will
be used to extract the surface data from the func, seed and mask images
as gifti files. The gifti data from Left and Right surfaces is then concatenated
together into a numpy array.

The default output filename is <func>_<seed>_meants.csv
inside the same directory as the <func> file.
This can be changed by specifying the full path after the '--outputcsv' option.

The integer labels for the seeds extracted can be printed to text using the
'--outputlabels' option.

Written by Erin W Dickie, March 17, 2016
"""

import sys
import subprocess
import os
import tempfile
import shutil
import logging
import logging.config

import numpy as np
import scipy as sp
import nibabel as nib
from docopt import docopt

import ciftify

config_path = os.path.join(os.path.dirname(__file__), "logging.conf")
logging.config.fileConfig(config_path, disable_existing_loggers=False)
logger = logging.getLogger(os.path.basename(__file__))

def main(tempdir):
    global DRYRUN

    arguments = docopt(__doc__)
    func = arguments['<func>']
    seed = arguments['<seed>']
    mask = arguments['--mask']
    roi_label = arguments['--roi-label']
    outputcsv = arguments['--outputcsv']
    outputlabels = arguments['--outputlabels']
    surfaceonly = arguments['--surfaceonly']
    weighted = arguments['--weighted']
    hemi = arguments['--hemi']
    debug = arguments['--debug']
    DRYRUN = arguments['--dry-run']

    if debug:
        logger.setLevel(logging.DEBUG)
        logging.getLogger('ciftify').setLevel(logging.DEBUG)

    logger.debug(arguments)

    func_type, funcbase = ciftify.utilities.determine_filetype(func)
    logger.debug("func_type is {}".format(func_type))
    seed_type, seedbase = ciftify.utilities.determine_filetype(seed)
    logger.debug("seed_type is {}".format(seed_type))
    if mask:
        mask_type, maskbase = ciftify.utilities.determine_filetype(mask)
    else: mask_type = None


    ## determine outbase if it has not been specified
    if not outputcsv:
        outputdir = os.path.dirname(func)
        outputcsv = os.path.join(outputdir,funcbase + '_' + seedbase + '_meants.csv' )

    ## if seed is dlabel - convert to dscalar

    if ".dlabel.nii" in seed:
        longseed=os.path.join(tempdir,'seedmap.dscalar.nii')
        shortseed = os.path.join(tempdir,'seedmapcombined.dscalar.nii')
        ciftify.utilities.run(['wb_command', '-cifti-all-labels-to-rois', seed, '1',longseed])
        num_maps = nib.load(longseed).get_data().shape[4]
        ciftify.utilities.run(['wb_command', '-cifti-math "((x*1)+(y*2))"', shortseed,
              '-var','x',longseed, '-select','1',str(1),
              '-var','y',longseed, '-select','1',str(2)])
        for roi in range(3,num_maps+1):
            ciftify.utilities.run(['wb_command', '-cifti-math "((x)+(y*{}))"'.format(roi), shortseed,
                  '-var','x',shortseed,
                  '-var','y',longseed, '-select','1',str(roi)])
        seed = shortseed

    if seed_type == "cifti":
        if surfaceonly:
            seed_data = ciftify.utilities.load_surfaceonly(seed)
            if func_type == "cifti":
                data = ciftify.utilities.load_surfaceonly(func)
            else:
                sys.exit('For surface-only, both <func> and <seed> inputs need to cifti files')
            if mask:
                if mask_type == "cifti":
                    mask_data = ciftify.utilities.load_surfaceonly(mask)
                else:
                    sys.exit('For surface-only, both <func>, <seed> and <mask> inputs need to cifti files')
        else:
            seed_data = ciftify.utilities.loadcifti(seed)
            if func_type == "cifti":
                data = ciftify.utilities.loadcifti(func)
            else:
                sys.exit('If <seed> is in cifti, func file needs to match.')
            if mask:
                if mask_type == "cifti":
                     mask_data = ciftify.utilities.loadcifti(mask)
                else:
                  sys.exit('If <seed> is in cifti, mask file needs to match.')

    elif seed_type == "gifti":
        seed_data = ciftify.utilities.load_gii_data(seed)
        if func_type == "gifti":
            data = ciftify.utilities.load_gii_data(func)
            if mask:
                if mask_type == "gifti":
                    mask_data = ciftify.utilities.load_gii_data(mask)
                else:
                    sys.exit('If <seed> is in gifti, mask file needs to match.')
        elif func_type == "cifti":
            Lfunc , Rfunc = load_surfaces(func, tempdir)
            if hemi == 'L':
                data = Lfunc
            elif hemi == 'R':
                data = Rfunc
            else:
             sys.exit('ERROR: hemisphere for the gifti seed file needs to be specified with "L" or "R"')
            ## also need to apply this change to the mask if it matters
            if mask_type == "cifti":
                 Lmask , Rmask = load_surfaces(mask, tempdir)
                 if hemi == 'L':
                     mask_data = Lmask
                 elif hemi == 'R':
                     mask_data = Rmask
        else:
            sys.exit('If <seed> is in gifti, <func> must be gifti or cifti')


    elif seed_type == "nifti":
        seed_data, _, _, _ = ciftify.utilities.loadnii(seed)
        if func_type == "nifti":
            data, _, _, _ = ciftify.utilities.loadnii(func)
        else:
            sys.exit('If <seed> is in nifti, func file needs to match.')
        if mask:
            if mask_type == "nifti":
                mask_data, _, _, _ = ciftify.utilities.loadnii(mask)
            else:
                sys.exit('If <seed> is in nifti, <mask> file needs to match.')


    ## check that dim 0 of both seed and func
    if data.shape[0] != seed_data.shape[0]:
        sys.exit('ERROR: at the func and seed images have difference number of voxels')

    if seed_data.shape[1] != 1:
        logger.WARNING("your seed volume has more than one timepoint")

    if mask:
        # attempt to mask out non-brain regions in ROIs
        n_seeds = len(np.unique(seed_data))
        if seed_data.shape[0] != mask_data.shape[0]:
            sys.exit('ERROR: at the mask and seed images have difference number of voxels')
        seed_data = np.multiply(seed_data,mask_data)
        if len(np.unique(seed_data)) != n_seeds:
            sys.exit('ERROR: At least 1 ROI completely outside mask for {}.'.format(outputcsv))

    if weighted:
        out_data = np.average(func, axis=0, weights=seed)
    else:
        # init output vector
        if roi_label:
            if float(roi_label) not in np.unique(seed_data)[1:]:
               sys.exit('ROI {}, not in seed map labels: {}'.format(roi_label, np.unique(seed)[1:]))
            else:
               rois = [float(roi_label)]
        else:
            rois = np.unique(seed_data)[1:]
        out_data = np.zeros((len(rois), data.shape[1]))

        # get mean seed dataistic from each, append to output
        for i, roi in enumerate(rois):
            idx = np.where(seed_data == roi)[0]
            out_data[i,:] = np.mean(data[idx, :], axis=0)

    # write out csv
    np.savetxt(outputcsv, out_data, delimiter=",")

    if outputlabels: np.savetxt(outputlabels, rois, delimiter=",")


if __name__ == '__main__':
    with ciftify.utilities.TempDir() as tmpdir:
        logger.info('Creating tempdir:{} on host:{}'.format(tmpdir,
                    os.uname()[1]))
        ret = main(tmpdir)
    sys.exit(ret)
