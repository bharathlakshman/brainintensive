#!/usr/bin/env python
"""
Projects a result (or atlas) in nifti space to a surface and subcortical masks.

Usage:
  ciftify_vol_result [options] <subject> <vol.nii.gz> <output.dscalar.nii>

Arguments:
    <subject>              The subject ID for the surfaces to project to.
    <vol.nii.gz>           Nifty volume to project to cifti space
    <output.dscalar.nii>   Output dscalar.nii image

Options:
  --hcp-data-dir PATH      Path to the hcp data directory. (Overides HCP_DATA environment variable)
  --integer-labels         The nifti input file contains integer label values
  --surface-vol NII        Specify a separate volume for surface projection than <vol.nii.gz>
  --subcortical-vol NII    Specify a separate volume for subcortical masks than <vol.nii.gz>
  --dilate mm              Run cifti-dilate with a specified mm
  --HCP-Pipelines          Indicates that the surfaces were generated by the HCP-Pipelines
  --HCP-MSMAll             Project to the MSMAll surface (instead of '32k_fs_LR', only works for HCP subjects)
  --resample-voxels        Use this argument to resample voxels 2x2x2 before projecting
  --debug                  Debug logging in Erin's very verbose style
  -n,--dry-run             Dry run
  -h,--help                Print help

DETAILS
This projects the nifti data to the surfaces from the MNINonLinear/32k_fs_LR space in hcp
for a given subject (the space used for fMRI analysis). This assumes that the HCP_DATA
folder was created with ciftify_recon_all. If the HCP_DATA was created using the
HCP pipelines (for example the HCP-dataset), use "--HCP-subject" option.

The "--surface-vol" and "--subcortical-vol" options were added so that you can specify
separate input nifty volumes for masks one the surface and for subcortical space.
(For example, so that a large hippocampus cluster is not projected to the nearby cortical surface).
If they are not given, <vol.nii.gz> will be used as the input volume for their steps.

The "--dilate" option will add a can to wb_commands -cifti-dilate function
(with the specified mm option) to expand clusters and fill holes.

If <subject> is set to 'HCP_S900_GroupAvg' the volume with project to the surfaces
of the HCP S900 release Average subject.  This “average fiducial mapping” approach
is not recommended in most cases, as group average surfaces do not encapsulate
all of the gray matter cortical ribbon.

(see https://github.com/edickie/ciftify/wiki/ciftify_vol_result-usage)

Written by Erin W Dickie, Mar 1, 2016
"""

import os
import sys
import subprocess
import logging
import logging.config

import numpy as np
from docopt import docopt

import ciftify

# Read logging.conf
config_path = os.path.join(os.path.dirname(__file__), "logging.conf")
logging.config.fileConfig(config_path, disable_existing_loggers=False)
logger = logging.getLogger(os.path.basename(__file__))

###
### Erin's little function for running things in the shell
def docmd(cmdlist):
    global DRYRUN
    "sends a command (inputed as a list) to the shell"
    logger.debug("Running command: {}".format(' '.join(cmdlist)))
    if not DRYRUN: subprocess.call(cmdlist)

def main(tempdir):
    global DRYRUN

    arguments       = docopt(__doc__)
    input_nii       = arguments['<vol.nii.gz>']
    hcp_subject     = arguments['<subject>']
    hcp_data_dir    = arguments['--hcp-data-dir']
    output_dscalar  = arguments['<output.dscalar.nii>']
    nifti_labels    = arguments['--integer-labels']
    surface_input_nii = arguments['--surface-vol']
    subcortical_input_nii = arguments['--subcortical-vol']
    resample_volume = arguments['--resample-voxels']
    this_is_HCP     = arguments['--HCP-Pipelines']
    use_MSMall      = arguments['--HCP-MSMAll']
    dilate_mm       = arguments['--dilate']
    debug           = arguments['--debug']
    DRYRUN          = arguments['--dry-run']


    if debug:
        logger.setLevel(logging.DEBUG)
        logging.getLogger('ciftify').setLevel(logging.DEBUG)

    if not surface_input_nii: surface_input_nii = input_nii
    if not subcortical_input_nii: subcortical_input_nii = input_nii

    ## determine all the surfaces and templates involved
    if hcp_subject == 'HCP_S900_GroupAvg':
        ## if no hcp subject directory is given, surfaces from the HCP_S900_GroupAvg_v1 folder are used
        subject = "S900"
        surface_dir = ciftify.config.find_HCP_S900_GroupAvg()
        surface_type = '_MSMAll.32k_fs_LR'
        ## however, to keep the result in 2x2x2 we use the MNI152_T1_2mm for resampling the subcortex
        T1wImage_MNI2mm = os.path.join(os.path.dirname(ciftify.config.find_fsl()), 'data','standard','MNI152_T1_2mm.nii.gz')
        AtlasROIs_MNI2mm = os.path.join(ciftify.config.find_ciftify_global(),'91282_Greyordinates','Atlas_ROIs.2.nii.gz')
        ## we will use the standard surface rois to mask out the middle bit
        surf_roi_L = os.path.join(ciftify.config.find_ciftify_global(),'91282_Greyordinates','L.atlasroi.32k_fs_LR.shape.gii')
        surf_roi_R = os.path.join(ciftify.config.find_ciftify_global(),'91282_Greyordinates','R.atlasroi.32k_fs_LR.shape.gii')

    else:
        ## if a subjects directory was named..these are the paths inside that directory
        subject = hcp_subject
        hcp_settings = ciftify.utilities.HCPSettings(arguments)
        hcp_subject_dir = os.path.join(hcp_settings.hcp_dir, subject)
        surface_dir = os.path.join(hcp_subject_dir,'MNINonLinear','fsaverage_LR32k')
        ## the masks for the subcortical structures
        AtlasROIs_MNI2mm = os.path.join(hcp_subject_dir,'MNINonLinear','ROIs','Atlas_ROIs.2.nii.gz')
        ## the masks for the surfaces (removed the middle subcortical bit)
        surf_roi_L = os.path.join(surface_dir,'{}.L.atlasroi.32k_fs_LR.shape.gii'.format(subject))
        surf_roi_R = os.path.join(surface_dir,'{}.R.atlasroi.32k_fs_LR.shape.gii'.format(subject))

        ## the T1w image name and the surface type is determined by the preprocessing pipeline
        ## note: were taking the 2x2x2mm version in all cases, and the 32k meshes
        if this_is_HCP:
            T1wImage_MNI2mm = os.path.join(hcp_subject_dir,'MNINonLinear','T1w_restore.2.nii.gz')
            if use_MSMall:
                ## MSMall surface have gone though an extra realignment stage..little fancier
                surface_type = '_MSMAll.32k_fs_LR'
            else:
                surface_type = '.32k_fs_LR'
        else:
            ## if this is a ciftify generated subject (i.e. the default) these are the inputs
            T1wImage_MNI2mm = os.path.join(hcp_subject_dir,'MNINonLinear','T1w.2.nii.gz')
            surface_type = '.32k_fs_LR'


    ## project the surface data
    if nifti_labels:
        ## if the data are integer masks - we use the "-enclosing" method
        for hemi in ['L','R']:
            docmd(['wb_command',
                '-volume-to-surface-mapping',
                surface_input_nii,
                os.path.join(surface_dir,'{}.{}.midthickness{}.surf.gii'.format(subject,hemi, surface_type)),
                os.path.join(tmpdir, '{}.func.gii'.format(hemi)),
                '-enclosing'])
    else:
        ## for numeric (float) data we use ribbon contrained method
        for hemi in ['L','R']:
            docmd(['wb_command',
                '-volume-to-surface-mapping',
                surface_input_nii,
                os.path.join(surface_dir,'{}.{}.midthickness{}.surf.gii'.format(subject,hemi,surface_type)),
                os.path.join(tmpdir, '{}.func.gii'.format(hemi)),
                '-ribbon-constrained',
                os.path.join(surface_dir, '{}.{}.white{}.surf.gii'.format(subject,hemi,surface_type)),
                os.path.join(surface_dir, '{}.{}.pial{}.surf.gii'.format(subject,hemi,surface_type))])

    ## if asked to resample the volume...do this step
    if resample_volume:
        rinput_subcortical = os.path.join(tmpdir, 'input_nii_r.nii.gz')
        if nifti_labels:
            docmd(['flirt', '-in', subcortical_input_nii,
                      '-ref', T1wImage_MNI2mm,
                      '-out', rinput_subcortical,
                      '-applyxfm',
                      '-init', os.path.join(os.path.dirname(ciftify.config.find_fsl()),'etc','flirtsch','ident.mat'),
                      '-interp', 'nearestneighbour'])

        else:
            docmd(['flirt', '-in', subcortical_input_nii,
                      '-ref', T1wImage_MNI2mm,
                      '-out', rinput_subcortical,
                      '-applyxfm',
                      '-init', os.path.join(os.path.dirname(ciftify.config.find_fsl()),'etc','flirtsch','ident.mat')])
    else:  rinput_subcortical = subcortical_input_nii

    if dilate_mm:
        if 'dtseries.nii' in output_dscalar:
            dense_out = os.path.join(tmpdir,'dense1.dtseries.nii')
        else:
            dense_out = os.path.join(tmpdir,'dense1.dscalar.nii')
    else:
        dense_out = output_dscalar

    ## combind all three into a dscalar..
    if 'dtseries.nii' in output_dscalar:
            docmd(['wb_command','-cifti-create-dense-timeseries',
                dense_out,
                '-volume',rinput_subcortical,AtlasROIs_MNI2mm,
                '-left-metric', os.path.join(tmpdir, 'L.func.gii'),
                '-roi-left', surf_roi_L,
                '-right-metric', os.path.join(tmpdir, 'R.func.gii'),
                '-roi-right', surf_roi_R])
    else:
            docmd(['wb_command','-cifti-create-dense-scalar',
                dense_out,
                '-volume',rinput_subcortical,AtlasROIs_MNI2mm,
                '-left-metric', os.path.join(tmpdir, 'L.func.gii'),
                '-roi-left', surf_roi_L,
                '-right-metric', os.path.join(tmpdir, 'R.func.gii'),
                '-roi-right', surf_roi_R])

    ## run the dilation is asked for..
    if dilate_mm:
        if nifti_labels:
            docmd(['wb_command', '-cifti-dilate', dense_out, 'COLUMN',
                str(dilate_mm), str(dilate_mm), output_dscalar,
                '-left-surface',
                os.path.join(surface_dir,'{}.L.midthickness{}.surf.gii'.format(subject,surface_type)),
                '-right-surface',
                os.path.join(surface_dir,'{}.R.midthickness{}.surf.gii'.format(subject,surface_type)),
                '-nearest'])
        else:
            docmd(['wb_command', '-cifti-dilate', dense_out, 'COLUMN',
                str(dilate_mm), str(dilate_mm), output_dscalar,
                '-left-surface',
                os.path.join(surface_dir,'{}.L.midthickness{}.surf.gii'.format(subject,surface_type)),
                '-right-surface',
                os.path.join(surface_dir,'{}.R.midthickness{}.surf.gii'.format(subject,surface_type))])


if __name__ == '__main__':
    with ciftify.utilities.TempDir() as tmpdir:
        logger.info('Creating tempdir:{} on host:{}'.format(tmpdir,
                    os.uname()[1]))
        ret = main(tmpdir)
    sys.exit(ret)
