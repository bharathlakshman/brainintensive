#!/usr/bin/env python
"""
Produces a correlation map of the mean time series within the seed with
every voxel in the supplied mask. This function assumes all supplied
images are the same size.

Usage:
    ciftify_seed_corr [options] <func> <seed>

Arguments:
    <func>          functional data
    <seed>          seed mask

Options:
    --roi-label INT    Specify the numeric label of the ROI you want a seedmap for
    --outputname STR   Specify the output filename
    --hemi HEMI        If the seed is a gifti file, specify the hemisphere (R or L) here
    --mask FILE        brainmask
    --surfaceonly      func or seed cifti files only contains surface data
    --weighted         compute weighted average timeseries from the seed map
    --use-TRs FILE     Only use the TRs listed in the file provided (TR's in file starts with 1)
    --output-ts        Also output write the from the seed to text
    --debug              Debug logging
    -n,--dry-run         Dry run
    -h, --help           Prints this message

DETAILS:
    At the moment, the seed mask only works with a single seed (all nonzero
    voxels will be pooled.) This outputs a single image with the r-values.
"""
import os
import sys
import subprocess
import tempfile
import shutil
import logging
import logging.config

import numpy as np
import scipy as sp
import nibabel as nib
from docopt import docopt

import ciftify

# Read logging.conf
config_path = os.path.join(os.path.dirname(__file__), "logging.conf")
logging.config.fileConfig(config_path, disable_existing_loggers=False)
logger = logging.getLogger(os.path.basename(__file__))

### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    logger.debug("Running command: {}".format(' '.join(cmdlist)))
    if not DRYRUN: subprocess.call(cmdlist)

def main():
    global DRYRUN

    arguments = docopt(__doc__)
    func   = arguments['<func>']
    seed   = arguments['<seed>']
    mask   = arguments['--mask']
    roi_label = arguments['--roi-label']
    surfaceonly = arguments['--surfaceonly']
    outputname = arguments['--outputname']
    weighted = arguments['--weighted']
    TR_file = arguments['--use-TRs']
    output_ts = arguments['--output-ts']
    hemi = arguments['--hemi']
    debug = arguments['--debug']
    DRYRUN = arguments['--dry-run']

    if debug:
        logger.setLevel(logging.DEBUG)
        logging.getLogger('ciftify').setLevel(logging.DEBUG)

    ## make the tempdir
    tempdir = tempfile.mkdtemp()

    func_type, funcbase = ciftify.utilities.determine_filetype(func)
    seed_type, seedbase = ciftify.utilities.determine_filetype(seed)
    if mask:
        mask_type, maskbase = ciftify.utilities.determine_filetype(mask)
    else: mask_type = None

    logger.debug('func_type: {}, funcbase: {}'.format(func_type, funcbase))
    logger.debug('seed_type:{}, seedbase: {}'.format(seed_type, seedbase))

    ## determine outbase if it has not been specified
    if not outbase:
        outputdir = os.path.dirname(func)
        outbase = '{}_{}'.format(funcbase, seedbase)
        outputname = os.path.join(outputdir, outbase)

    logger.debug(outbase)

    ## run ciftify-meants to get the ts file
    ts_tmpfile = os.path.join(tempdir, '{}_meants.csv'.format(outbase))
    meants_cmd = ['ciftify_meants']
    if surfaceonly: meants_cmd.append('--surfaceonly')
    if mask_type: meants_cmd.extend(['--mask', mask])
    if weighted: meants_cmd.append('--weighted')
    if roi_label: meants_cmd.extend(['--roi-label',roi_label])
    if hemi: meants_cmd.extend(['--hemi',hemi])
    meants_cmd.extend(['--outputcsv', ts_tmpfile, func, seed])
    docmd(meants_cmd)

    # load the file we just made
    seed_ts = np.loadtxt(ts_tmpfile, delimiter=',')

    ## convert to nifti
    if func_type == "cifti":
        func_fnifti = os.path.join(tempdir,'func.nii.gz')
        docmd(['wb_command','-cifti-convert','-to-nifti',func, func_fnifti])
        func_data, outA, header, dims = ciftify.utilities.loadnii(func_fnifti)

    # import template, store the output paramaters
    if func_type == "nifti":
        func_data, outA, header, dims = ciftify.utilities.loadnii(func)

    if mask_type == "cifti":
        mask_fnifti = os.path.join(tempdir,'mask.nii.gz')
        docmd(['wb_command','-cifti-convert','-to-nifti', mask, mask_fnifti])
        mask_data, _, _, _ = ciftify.utilities.loadnii(mask_fnifti)

    if mask_type == "nifti":
        mask_data, _, _, _ = ciftify.utilities.loadnii(mask)

    # decide which TRs go into the correlation
    if TR_file:
        TR_file = np.loadtxt(TR_file, int)
        TRs = TR_file - 1 # shift TR-list to be zero-indexed
    else:
        TRs = np.arange(dims[3])

    # get mean seed timeseries
    if mask:
        idx_mask = np.where(mask_data > 0)[0]
    else:
        idx_mask = np.arange(func_data.shape[0])

    # create output array
    out = np.zeros([dims[0]*dims[1]*dims[2], 1])

    # look through each time series, calculating r
    for i in np.arange(len(idx_mask)):
        out[idx_mask[i]] = np.corrcoef(seed_ts[TRs], func_data[idx_mask[i], TRs])[0][1]

    # create the 3D volume and export
    out = out.reshape([dims[0], dims[1], dims[2], 1])
    out = nib.nifti1.Nifti1Image(out, outA)

    # write out nifti
    if func_type == "nifti":
        if outputname.endswith(".nii.gz"):
            out.to_filename(outputname)
        else:
            out.to_filename('{}.nii.gz'.format(outputname))

    if func_type == "cifti":
        out.to_filename(os.path.join(tempdir,'out.nii.gz'))
        docmd(['wb_command', '-cifti-reduce', func, 'MIN', os.path.join(tempdir, 'template.dscalar.nii')])

        ## convert back
        if not outputname.endswith('.dscalar.nii'):
            outputname = '{}.dscalar.nii'.format(outputname)
        docmd(['wb_command','-cifti-convert','-from-nifti',
            os.path.join(tempdir,'out.nii.gz'),
            os.path.join(tempdir, 'template.dscalar.nii'),
            outputname])

    # write out the ts if asked
    if output_ts:
        docmd(['cp', ts_tmpfile, '{}_ts.txt'.format(outbase)])

    ## remove the tempdirectory
    shutil.rmtree(tempdir)

if __name__ == '__main__':
    main()
